android.useAndroidX=true
android.enableJetifier=true

# -----------------------------------------------------------------------------
# Publishing Properties for Maven Central (Sonatype OSSRH)
#
# IMPORTANT:
# DO NOT STORE YOUR ACTUAL CREDENTIALS IN THIS FILE IF IT'S VERSION CONTROLLED.
# Instead, place them in your global Gradle properties file, typically located at:
#   - ~/.gradle/gradle.properties (on Linux/macOS)
#   - C:\Users\<YourUser>\.gradle\gradle.properties (on Windows)
#
# These are the properties you'll need to define there:
# -----------------------------------------------------------------------------

# --- Sonatype OSSRH (Maven Central) Credentials ---
# sonatypeUsername=your_sonatype_jira_username
# sonatypePassword=your_sonatype_jira_password_or_token

# --- GPG Signing Key Details ---
# Ensure you have GPG installed and a key pair generated.
# The key ID is usually the last 8 characters of your key's fingerprint.
# signing.keyId=YOUR_GPG_KEY_ID_LAST_8_CHARS
# signing.password=YOUR_GPG_KEY_PASSPHRASE
# signing.secretKeyRingFile=/path/to/your/secring.gpg
#   OR for GPG versions 2.1+ that don't use secring.gpg by default,
#   you might need to export the key: gpg --export-secret-keys YOUR_KEY_ID > my-secret-key.gpg
#   then set: signing.secretKeyRingFile=/path/to/my-secret-key.gpg
#   Alternatively, for modern Gradle versions, you might be able to use in-memory key representations
#   or let the signing plugin use GPG agent / default GPG key if configured.
#   Check Gradle signing plugin documentation for the most up-to-date practices.

# --- Library Version (Optional - can also be defined in build.gradle.kts) ---
# libraryVersion=1.0.0

# --- Group ID (Optional - can also be defined in build.gradle.kts) ---
# libraryGroupId=com.yourcompany.yourlibrary

# You can also use environment variables or prompt for these if you prefer,
# see Gradle documentation for more details on managing credentials.
